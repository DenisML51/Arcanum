// hooks/stores/useAlchemyStore.ts

import { useInventoryStore } from './useInventoryStore';
import { usePotionStore } from './usePotionStore';
import { useCharacterStore } from './useCharacterStore';
import { useDataStore } from './useDataStore';
import { useFiltersStore } from './useFiltersStore';
import { useIngredientSelectionStore } from './useIngredientSelectionStore';
import type { Ingredient, Recipe, RecipeComponent, Potion } from '../types';
import { getQualityEffect } from '../types';

// –ì–ª–∞–≤–Ω—ã–π —Ö—É–∫, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö—É–∫–∏
export function useAlchemyStore() {
  const inventory = useInventoryStore();
  const potions = usePotionStore();
  const character = useCharacterStore();
  const data = useDataStore();
  const filters = useFiltersStore();
  const ingredientSelection = useIngredientSelectionStore();

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤–∞—Ä–∫–∏ –∑–µ–ª–∏–π
  const canBrewRecipe = (recipe: Recipe): { canBrew: boolean; missingIngredients: string[] } => {
    const missingIngredients: string[] = [];

    for (const component of recipe.components) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      const selectedIngredientId = ingredientSelection.getSelectedIngredient(recipe.id, component.id);
      
      if (!selectedIngredientId) {
        // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
        missingIngredients.push(component.name);
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
      const available = inventory.isIngredientAvailable(selectedIngredientId, component.quantity);
      if (!available) {
        const ingredient = inventory.getIngredient(selectedIngredientId);
        missingIngredients.push(ingredient?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç');
      }
    }

    return {
      canBrew: missingIngredients.length === 0,
      missingIngredients
    };
  };

  const findSuitableIngredient = (component: RecipeComponent): Ingredient | undefined => {
    return inventory.ingredients.find(ingredient => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      if (ingredient.quantity < component.quantity) return false;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      if (component.types && component.types.length > 0) {
        if (!component.types.includes(ingredient.type)) return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      if (component.categories && component.categories.length > 0) {
        if (!component.categories.includes(ingredient.category)) return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –í–°–ï —Ç—Ä–µ–±—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      if (component.requiredElements && component.requiredElements.length > 0) {
        const hasAllRequiredElements = component.requiredElements.every(requiredElement =>
          ingredient.elements && ingredient.elements.includes(requiredElement)
        );
        if (!hasAllRequiredElements) return false;
      }

      return true;
    });
  };

  const brewPotion = (recipe: Recipe): { success: boolean; message: string; potion?: Potion } => {
    const { canBrew, missingIngredients } = canBrewRecipe(recipe);
    
    if (!canBrew) {
      return {
        success: false,
        message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: ${missingIngredients.join(', ')}`
      };
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
    const usedIngredients: { id: string; quantity: number }[] = [];
    
    for (const component of recipe.components) {
      const ingredientId = ingredientSelection.getSelectedIngredient(recipe.id, component.id);
      
      if (!ingredientId) {
        return {
          success: false,
          message: `–ù–µ –≤—ã–±—Ä–∞–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${component.name}`
        };
      }
      
      usedIngredients.push({ id: ingredientId, quantity: component.quantity });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º
    const success = inventory.useIngredients(usedIngredients);
    
    if (!success) {
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤'
      };
    }

    // –°–æ–∑–¥–∞–µ–º –∑–µ–ª—å–µ
    const qualityResult = determineBrewedQuality();
    const qualityEffect = getQualityEffect(qualityResult.quality);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    let finalDescription = recipe.description;
    if (qualityEffect) {
      finalDescription += `\n\n–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å: ${qualityEffect}`;
    }
    
    const potion: Omit<Potion, 'id'> = {
      name: recipe.name,
      description: finalDescription,
      effect: recipe.effect,
      rarity: recipe.rarity,
      potionType: recipe.potionType,
      potionQuality: recipe.potionQuality,
      brewedQuality: qualityResult.quality,
      tags: recipe.tags,
      quantity: 1,
      recipeId: recipe.id,
      dateCreated: new Date().toISOString(),
      components: recipe.components,
      rollResults: qualityResult.rollResults
    };

    potions.addPotion(potion);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    character.incrementStat('totalBrews');
    character.incrementStat('successfulBrews');
    character.incrementStat('potionsCreated');
    character.incrementStat('ingredientsUsed', usedIngredients.reduce((sum, ing) => sum + ing.quantity, 0));

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±—Ä–æ—Å–∫–æ–≤
    let message = `–ó–µ–ª—å–µ "${recipe.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!`;
    message += `\nüé≤ –û—Å–Ω–æ–≤–Ω–æ–π –±—Ä–æ—Å–æ–∫: ${qualityResult.rollResults.naturalRoll} + ${qualityResult.rollResults.bonus} = ${qualityResult.rollResults.mainRoll}`;
    
    if (qualityResult.rollResults.fumbleRoll) {
      message += `\nüí• –ü—Ä–æ–≤–∞–ª (–∫100): ${qualityResult.rollResults.fumbleRoll}`;
    }
    if (qualityResult.rollResults.excellenceRoll) {
      message += `\n‚≠ê –£—Å–ø–µ—Ö (–∫100): ${qualityResult.rollResults.excellenceRoll}`;
    }
    
    message += `\n–ö–∞—á–µ—Å—Ç–≤–æ: ${qualityResult.quality === 'poor' ? '–ò–∑—ä—è–Ω' : qualityResult.quality === 'excellent' ? '–ò–∑—ã—Å–∫–∞–Ω–Ω–æ–µ' : '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ'}`;
    
    if (qualityEffect) {
      message += `\n–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å: ${qualityEffect}`;
    }

    return {
      success: true,
      message,
      potion: { ...potion, id: Date.now().toString() }
    };
  };

  const determineBrewedQuality = (): { quality: 'poor' | 'standard' | 'excellent'; rollResults: { naturalRoll: number; bonus: number; mainRoll: number; fumbleRoll?: number; excellenceRoll?: number } } => {
    // –ë—Ä–æ—Å–æ–∫ –∫20 –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const naturalRoll = Math.floor(Math.random() * 20) + 1;
    
    // –ë–æ–Ω—É—Å –æ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–æ–≤
    let bonus = 0;
    if (character.activeEquipment) {
      bonus += character.activeEquipment.brewingBonus;
    }
    if (character.character.alchemyToolsProficiency) {
      bonus += 2; // –ü—Ä–æ—Ñ–∏—Ü–∏–µ–Ω—Å–∏ –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –∞–ª—Ö–∏–º–∏–∫–∞ –¥–∞–µ—Ç +2
    }

    const mainRoll = naturalRoll + bonus;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±—Ä–æ—Å–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    let fumbleRoll: number | undefined;
    let excellenceRoll: number | undefined;
    
    if (naturalRoll === 1) {
      // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–∞–ª - –±—Ä–æ—Å–æ–∫ –∫100
      fumbleRoll = Math.floor(Math.random() * 100) + 1;
    } else if (naturalRoll === 20) {
      // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö - –±—Ä–æ—Å–æ–∫ –∫100
      excellenceRoll = Math.floor(Math.random() * 100) + 1;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    let quality: 'poor' | 'standard' | 'excellent';
    
    if (naturalRoll === 1 || mainRoll < 10) {
      quality = 'poor';
    } else if (naturalRoll === 20 || mainRoll >= 25) {
      quality = 'excellent';
    } else if (mainRoll >= 15) {
      quality = 'excellent';
    } else if (mainRoll >= 10) {
      quality = 'standard';
    } else {
      quality = 'poor';
    }

    return {
      quality,
      rollResults: {
        naturalRoll,
        bonus,
        mainRoll,
        fumbleRoll,
        excellenceRoll
      }
    };
  };

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
  const selectIngredientForComponent = (recipeId: string, componentId: string, ingredientId: string | undefined) => {
    ingredientSelection.setSelectedIngredient(recipeId, componentId, ingredientId);
  };

  const getSelectedIngredient = (recipeId: string, componentId: string) => {
    return ingredientSelection.getSelectedIngredient(recipeId, componentId);
  };

  const clearIngredientSelection = (recipeId: string, componentId: string) => {
    ingredientSelection.clearSelection(recipeId, componentId);
  };

  const clearAllIngredientSelections = () => {
    ingredientSelection.clearAllSelections();
  };

  return {
    // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
    ingredients: inventory.ingredients,
    allIngredients: data.ingredients, // –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ JSON
    addIngredient: inventory.addIngredient,
    updateIngredientQuantity: inventory.updateIngredientQuantity,
    removeIngredient: inventory.removeIngredient,
    getIngredient: inventory.getIngredient,
    getTotalIngredients: inventory.getTotalIngredients,
    getIngredientsByCategory: inventory.getIngredientsByCategory,
    isIngredientAvailable: inventory.isIngredientAvailable,
    cleanDuplicates: inventory.cleanDuplicates,

    // –ó–µ–ª—å—è
    potions: potions.potions,
    addPotion: potions.addPotion,
    updatePotionQuantity: potions.updatePotionQuantity,
    removePotion: potions.removePotion,
    togglePotionFavorite: potions.togglePotionFavorite,
    getPotion: potions.getPotion,
    getPotionsByType: potions.getPotionsByType,
    getFavoritePotions: potions.getFavoritePotions,
    getTotalPotions: potions.getTotalPotions,
    consumePotion: potions.consumePotion,

    // –ü–µ—Ä—Å–æ–Ω–∞–∂
    character: character.character,
    currency: character.currency,
    stats: character.stats,
    equipment: character.equipment,
    availableEquipment: character.equipment,
    activeEquipment: character.activeEquipment,
    playerGold: character.getTotalGold(),
    updateCharacterName: character.updateCharacterName,
    updateCharacterLevel: character.updateCharacterLevel,
    updateAlchemyToolsProficiency: character.updateAlchemyToolsProficiency,
    updateCharacterStats: character.updateCharacterStats,
    updateCurrency: character.updateCurrency,
    spendGold: character.spendGold,
    earnGold: character.earnGold,
    getTotalGold: character.getTotalGold,
    buyEquipment: character.buyEquipment,
    setActiveEquipment: character.setActiveEquipment,
    updateStats: character.updateStats,
    incrementStat: character.incrementStat,

    // –î–∞–Ω–Ω—ã–µ
    recipes: data.recipes,
    biomes: data.biomes,
    isLoading: data.isLoading,
    error: data.error,
    reloadData: data.reloadData,
    getRecipe: data.getRecipe,
    getBiome: data.getBiome,
    getIngredientData: data.getIngredient,
    getRecipesByType: data.getRecipesByType,
    getRecipesByRarity: data.getRecipesByRarity,

    // –§–∏–ª—å—Ç—Ä—ã
    activeFilters: filters.filters,
    updateFilter: filters.updateFilter,
    resetFilters: filters.resetFilters,
    toggleFilterValue: filters.toggleFilterValue,
    hasActiveFilters: filters.hasActiveFilters,

    // –í–∞—Ä–∫–∞ –∑–µ–ª–∏–π
    canBrewRecipe,
    findSuitableIngredient,
    brewPotion,
    selectIngredientForComponent,
    getSelectedIngredient,
    clearIngredientSelection,
    clearAllIngredientSelections,
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
    buyIngredient: (ingredientId: string, quantity: number) => {
      // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ –¥–∞–Ω–Ω—ã—Ö JSON
      const allIngredients = data.recipes.length > 0 ? 
        [...inventory.ingredients] : []; // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
      
      const ingredient = allIngredients.find(ing => ing.id === ingredientId);
      if (!ingredient) {
        return { success: false, message: '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }
      
      const totalCost = ingredient.cost * quantity;
      if (!character.spendGold(totalCost)) {
        return { success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞' };
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
      const existingIngredient = inventory.getIngredient(ingredientId);
      if (existingIngredient) {
        inventory.updateIngredientQuantity(ingredientId, existingIngredient.quantity + quantity);
      } else {
        inventory.addIngredient({...ingredient, quantity});
      }
      
      return { success: true, message: `–ö—É–ø–ª–µ–Ω–æ ${quantity} x ${ingredient.name}` };
    },
    
    sellIngredient: (ingredientId: string, quantity: number) => {
      const ingredient = inventory.getIngredient(ingredientId);
      if (!ingredient || ingredient.quantity < quantity) {
        return { success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤' };
      }
      
      const sellPrice = Math.floor(ingredient.cost * quantity * 0.5); // –ü—Ä–æ–¥–∞–µ–º –∑–∞ –ø–æ–ª–æ–≤–∏–Ω—É —Ü–µ–Ω—ã
      character.earnGold(sellPrice);
      inventory.updateIngredientQuantity(ingredientId, ingredient.quantity - quantity);
      
      return { success: true, message: `–ü—Ä–æ–¥–∞–Ω–æ ${quantity} x ${ingredient.name} –∑–∞ ${sellPrice} –∑–º` };
    },
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    exploreLocation: (biomeId: string) => {
      const biome = data.getBiome(biomeId);
      if (!biome) {
        return { success: false, message: '–ë–∏–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω', items: [] };
      }
      
      if (!character.spendGold(biome.cost)) {
        return { success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è', items: [] };
      }
      
      // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è - –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
      const foundItems: { id: string; quantity: number; name: string }[] = [];
      const allIngredients = [
        ...biome.commonIngredients,
        ...biome.uncommonIngredients,
        ...biome.rareIngredients,
        ...biome.legendaryIngredients
      ];
      
      allIngredients.forEach(available => {
        if (Math.random() < available.chance) {
          const [min, max] = available.quantity;
          const quantity = Math.floor(Math.random() * (max - min + 1)) + min;
          
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
          const ingredientData = data.getIngredient(available.id);
          if (!ingredientData) {
            console.warn(`–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —Å ID ${available.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö`);
            return;
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–µ–∫–∞–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏)
          inventory.addIngredient({
            ...ingredientData,
            quantity: quantity
          });
          
          foundItems.push({ 
            id: available.id, 
            quantity, 
            name: ingredientData.name 
          });
        }
      });
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ö–æ–¥–∫–∞—Ö
      let message = `–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${foundItems.length}`;
      if (foundItems.length > 0) {
        message += '\n\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:';
        foundItems.forEach(item => {
          message += `\n‚Ä¢ ${item.name} √ó${item.quantity}`;
        });
      } else {
        message += '\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.';
      }
      
      return { 
        success: true, 
        message,
        items: foundItems
      };
    },
    
    // –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è
    addRecipeToLaboratory: data.addRecipeToLaboratory,
    removeRecipeFromLaboratory: data.removeRecipeFromLaboratory,
    isRecipeInLaboratory: data.isRecipeInLaboratory,
    getLaboratoryRecipes: data.getLaboratoryRecipes,
    
    // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    isIngredientCompatibleWithComponent: () => true
  };
}
